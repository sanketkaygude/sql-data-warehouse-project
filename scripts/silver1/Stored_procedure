/*
===========================================
stored procedure scripts = load data bronze layer >> silver layer
===========================================
script purpose = this stored procedure performs ETL (Extract,Transform & Load) process to 
insert the data in silver layer tables from bronze layer tables

steps in stored procedure 
Truncate the table
Insert the transformed data from bronze layer to silver layer

usage example
EXEC silver.load_silver


*/
use datawarehouse
 
 EXEC silver.load_silver
 CREATE OR ALTER PROCEDURE silver.load_silver AS
 BEGIN
	declare @start_time DATETIME , @end_time DATETIME,@Batch_start_time datetime,@batch_end_time datetime ;
		BEGIN TRY
	        SET @Batch_start_time = GETDATE();
			PRINT '========================';
			PRINT 'Loading siver layer';
			PRINT '========================';


			PRINT '-------------------------';
			PRINT 'LOADING CRM Tables';
			PRINT '-------------------------';

			SET @start_time = getdate();
			 Print '>> Truncating table -silver.crm_cust_info'
			 TRUNCATE TABLE silver.crm_cust_info
			  Print '>> Inserting data in table - silver.crm_cust_info' 
  
  
			  INSERT INTO silver.crm_cust_info (
			cst_id,
			cst_key,
			cst_firstname,
			cst_lastname,
			cst_marital_status,
			cst_gndr,
			cst_create_date)
			SELECT 
			cst_id,
			cst_key,
			TRIM (cst_firstname) as cst_firstname,  -- REMOVING UNMWANTED SPACE
			TRIM (cst_lastname) as cst_lastname ,  -- REMOVING UNMWANTED SPACE
			CASE
				WHEN UPPER(TRIM (cst_marital_status)) ='S' THEN 'SINGLE'
				WHEN UPPER(TRIM (cst_marital_status)) ='M' THEN 'MARRIED'
				ELSE 'N/A'
				END cst_marital_status, ---NORMALIZE MARITAL STATUS INTO MENIGFULL WORD
			CASE
				WHEN UPPER(TRIM (cst_gndr)) ='F' THEN 'FEMALE'
				WHEN UPPER(TRIM (cst_gndr)) ='M' THEN 'MALE'
				ELSE 'N/A'
				END cst_gndr, ---NORMALIZE GENDER INTO MENIGFULL WORD
			cst_create_date
			FROM
				(SELECT 
					*,
					ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date desc) as most_recent
				from bronze.crm_cust_info
				WHERE cst_id is not null)t
				WHERE most_recent = 1
				  Print '>> Data inserting completed - silver.crm_cust_info'
				SET @end_time = getdate();
			    print 'Load Duration' + CAST (datediff(second,@start_time,@end_time) as nvarchar)+'seconds'

			  SET @start_time = getdate();
			  Print '>> Truncating table -silver.crm_prd_info'
			  TRUNCATE TABLE silver.crm_sales_details
			  Print '>> Inserting data in table - silver.crm_prd_info'

			INSERT INTO	 silver.crm_prd_info (
					prd_id ,
					cat_id,
					prd_key,
					prd_nm,
					prd_cost,
					prd_line,
					prd_start_dt,
					prd_end_dt)


			SELECT prd_id,
				  Replace (SUBSTRING(prd_key,1,5),'-','_') as cat_id,--extract category id
				   SUBSTRING(prd_key,7,len(prd_key)) as prd_key,-- extract prd_key
				  trim(prd_nm) as prd_nm,
				  coalesce(prd_cost,0) as prd_cost,
				  CASE 
				  WHEN upper(trim(prd_line)) = 'M' then 'Mountain'
				  WHEN upper(trim(prd_line)) = 'R' then 'Road'
				  WHEN upper(trim(prd_line)) = 'S' then 'Other Sales'
				  WHEN upper(trim(prd_line)) = 'T' then 'Touring'
				  ELSE 'N/A'
				  end prd_line --map product line codes to decscriptive 
				  ,cast (prd_start_dt as date) prd_start_dt
				  ,cast(lead(prd_start_dt) over (partition by prd_key order by prd_start_dt)-1 as date) as prd_end_dt -- calculate end date as one day before next date start
			  FROM bronze.crm_prd_info


			  Print '>> Data inserting completed - silver.crm_prd_info'
			  SET @end_time = getdate();
			  print 'Load Duration' + CAST (datediff(second,@start_time,@end_time) as nvarchar)+'seconds'


			SET @start_time = getdate();
			  Print '>> Truncating table -silver.crm_sales_details'
			  TRUNCATE TABLE silver.crm_sales_details
			  Print '>> Inserting data in table - silver.crm_sales_details'
 
			 INSERT INTO silver.crm_sales_details(sls_ord_num,sls_prd_key,sls_cust_id,sls_order_dt,sls_ship_dt,sls_due_dt,sls_sales,sls_quantity,sls_price)

			SELECT sls_ord_num,
				  sls_prd_key,
				  sls_cust_id,
				  CASE
				  WHEN sls_order_dt <= 0 or len(sls_order_dt) != 8 then NULL
				  ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)
				  END sls_order_dt,
				  CASE
				  WHEN sls_ship_dt <= 0 or len(sls_ship_dt) != 8 then NULL
				  ELSE CAST(CAST(sls_ship_dt AS VARCHAR) AS DATE)
				  END sls_ship_dt,
				  CASE
				  WHEN sls_due_dt <= 0 or len(sls_due_dt) != 8 then NULL
				  ELSE CAST(CAST(sls_due_dt AS VARCHAR) AS DATE)
				  END sls_due_dt,
				  CASE
					WHEN sls_sales is null OR sls_sales <= 0 OR (Abs(sls_price)*sls_quantity) != sls_sales THEN ABS (sls_price)*sls_quantity
					ELSE sls_sales
					END as  sls_sales,
					sls_quantity,
					CASE
					WHEN sls_price is null OR sls_price <= 0 THEN ABS(sls_sales)/sls_quantity
					ELSE sls_price
					END as  sls_price 
     
			  FROM bronze.crm_sales_details 

				Print '>> Data inserting completed - silver.crm_sales_details'
				SET @end_time = getdate();
			    print 'Load Duration' + CAST (datediff(second,@start_time,@end_time) as nvarchar)+'seconds'

			    SET @start_time = getdate();

			PRINT '-------------------------';
			PRINT 'LOADING ERP Tables';
			PRINT '-------------------------';
			

			SET @start_time = getdate();

			  Print '>> Truncating table -silver.erp_cust_az12'
			  TRUNCATE TABLE silver.erp_cust_az12
			  Print '>> Inserting data in table - silver.erp_cust_az12'

			INSERT INTO silver.erp_cust_az12 (cid,bdate,gen)


			SELECT 
				CASE
					WHEN cid LIKE 'NAS%' THEN SUBSTRING (cid,4, len(cid))
					ELSE cid
					END AS cid,
				CASE
					WHEN bdate > getdate() THEN null
					ELSE bdate
					END AS bdate,
				CASE
					WHEN UPPER(TRIM(GEN)) IN ('F' , 'FEMALE') THEN 'Female'
					WHEN UPPER(TRIM(GEN)) IN ('M','MALE') THEN 'Male'
					ELSE 'N/A'
					END AS gen
      
			  FROM bronze.erp_cust_az12 
			  Print '>> Data inserting completed - silver.erp_cust_az12'
			  SET @end_time = getdate();
			  print 'Load Duration' + CAST (datediff(second,@start_time,@end_time) as nvarchar)+'seconds'

			  SET @start_time = getdate();

			 Print '>> Truncating table -silver.erp_loc_a101'
			 TRUNCATE TABLE silver.erp_loc_a101
			 Print '>> Inserting data in table - silver.erp_loc_a101'

			INSERT INTO silver.erp_loc_a101 (
			cid,cntry)

			SELECT
				  trim(REPLACE(cid,'-','')) as cid
				  ,
				  CASE 
					WHEN TRIM(CNTRY) = 'DE' THEN 'Germany'
					WHEN TRIM(CNTRY) IN ('USA','US') THEN 'United States'
					WHEN TRIM(CNTRY) = '' or cntry is NULL THEN 'N/A'
					ELSE CNTRY
					END AS cntry
			  FROM bronze.erp_loc_a101
			  Print '>> Data inserting completed - silver.erp_loc_a101'
			  SET @end_time = getdate();
			  print 'Load Duration' + CAST (datediff(second,@start_time,@end_time) as nvarchar)+'seconds'

			  SET @start_time = getdate();


			 Print '>> Truncating table -silver.erp_px_cat_g1v2'
			 TRUNCATE TABLE silver.erp_px_cat_g1v2
			 Print '>> Inserting data in table - silver.erp_px_cat_g1v2'
			insert into silver.erp_px_cat_g1v2 (id,cat,subcat,maintenance)

			SELECT ID
				  ,trim(CAT)
				  ,trim(SUBCAT)
				  ,trim(MAINTENANCE)
			  FROM bronze.erp_px_cat_g1v2
				  Print '>> Data inserting completed - silver.erp_px_cat_g1v2'
				  SET @end_time = getdate();
			      print 'Load Duration' + CAST (datediff(second,@start_time,@end_time) as nvarchar)+'seconds'

			      
				  
				  SET @batch_end_time = GETDATE();
				  PRINT 'Batch duration'+ CAST (datediff(second,@batch_start_time,@batch_end_time) as nvarchar)+'seconds'
					END TRY
						BEGIN CATCH
							PRINT '============================================================';
							PRINT 'ERROR OCCURED DURING LOADING SILVER LAYER';
							PRINT 'ERROR MEASSAGE' + ERROR_MESSAGE();
							PRINT 'ERROR MEASSAGE' + CAST (ERROR_NUMBER() AS NVARCHAR);
							PRINT '============================================================';
						END CATCH

			END
